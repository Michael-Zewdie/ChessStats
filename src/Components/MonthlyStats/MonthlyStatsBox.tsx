import React, { useState } from 'react';
import type { MonthlyRatingPoint } from "../../Api/MonthlyStats/route.ts";
import type { ChessProfile } from "../../Types/ChessProfile";
import { RatingProgressionChart, type GameData } from '../RatingProgressionChart';
import '../../index.css'

interface MonthlyStatsBoxProps {
  data: MonthlyRatingPoint[]; // raw MonthlyStats(username) output
  profile?: ChessProfile;
  country?: string | null;
}

const COLORS: Record<string, string> = {
  rapid: '#00C853', // green
  blitz: '#FFD600', // yellow
  bullet: '#D50000', // red
  daily: '#42A5F5', // optional fallback for daily/correspondence
};

function convertToGameData(data: MonthlyRatingPoint[]): Record<string, GameData[]> {
  const gamesByTimeClass: Record<string, GameData[]> = {};
  
  data.forEach((point) => {
    if (!gamesByTimeClass[point.time_class]) {
      gamesByTimeClass[point.time_class] = [];
    }
    
    // Convert month string (YYYY-MM) to a proper date (end of month for better progression)
    const [year, month] = point.month.split('-');
    const lastDayOfMonth = new Date(parseInt(year), parseInt(month), 0);
    
    gamesByTimeClass[point.time_class].push({
      date: lastDayOfMonth.toISOString().split('T')[0],
      rating: point.end,
      time_class: point.time_class
    });
  });
  
  return gamesByTimeClass;
}

function getCountryFlag(country: string | null): string {
  if (!country) return 'üåç';
  
  // Country name to flag emoji mapping
  const countryFlags: Record<string, string> = {
    // Africa
    'ethiopia': 'üá™üáπ',
    'south africa': 'üáøüá¶',
    'egypt': 'üá™üá¨',
    'nigeria': 'üá≥üá¨',
    'kenya': 'üá∞üá™',
    'morocco': 'üá≤üá¶',
    'ghana': 'üá¨üá≠',
    'tunisia': 'üáπüá≥',
    'algeria': 'üá©üáø',
    'uganda': 'üá∫üá¨',
    'tanzania': 'üáπüáø',
    'zimbabwe': 'üáøüáº',
    'zambia': 'üáøüá≤',
    'botswana': 'üáßüáº',
    'senegal': 'üá∏üá≥',
    
    // North America
    'united states': 'üá∫üá∏',
    'canada': 'üá®üá¶',
    'mexico': 'üá≤üáΩ',
    'guatemala': 'üá¨üáπ',
    'cuba': 'üá®üá∫',
    'jamaica': 'üáØüá≤',
    'costa rica': 'üá®üá∑',
    'panama': 'üáµüá¶',
    
    // South America
    'brazil': 'üáßüá∑',
    'argentina': 'üá¶üá∑',
    'chile': 'üá®üá±',
    'colombia': 'üá®üá¥',
    'peru': 'üáµüá™',
    'venezuela': 'üáªüá™',
    'ecuador': 'üá™üá®',
    'uruguay': 'üá∫üáæ',
    'bolivia': 'üáßüá¥',
    'paraguay': 'üáµüáæ',
    
    // Europe
    'united kingdom': 'üá¨üáß',
    'germany': 'üá©üá™',
    'france': 'üá´üá∑',
    'spain': 'üá™üá∏',
    'italy': 'üáÆüáπ',
    'russia': 'üá∑üá∫',
    'poland': 'üáµüá±',
    'ukraine': 'üá∫üá¶',
    'netherlands': 'üá≥üá±',
    'belgium': 'üáßüá™',
    'switzerland': 'üá®üá≠',
    'austria': 'üá¶üáπ',
    'sweden': 'üá∏üá™',
    'norway': 'üá≥üá¥',
    'denmark': 'üá©üá∞',
    'finland': 'üá´üáÆ',
    'iceland': 'üáÆüá∏',
    'portugal': 'üáµüáπ',
    'greece': 'üá¨üá∑',
    'turkey': 'üáπüá∑',
    'czech republic': 'üá®üáø',
    'hungary': 'üá≠üá∫',
    'romania': 'üá∑üá¥',
    'bulgaria': 'üáßüá¨',
    'croatia': 'üá≠üá∑',
    'serbia': 'üá∑üá∏',
    'bosnia and herzegovina': 'üáßüá¶',
    'slovenia': 'üá∏üáÆ',
    'slovakia': 'üá∏üá∞',
    'estonia': 'üá™üá™',
    'latvia': 'üá±üáª',
    'lithuania': 'üá±üáπ',
    'ireland': 'üáÆüá™',
    'luxembourg': 'üá±üá∫',
    'malta': 'üá≤üáπ',
    'cyprus': 'üá®üáæ',
    
    // Asia
    'china': 'üá®üá≥',
    'japan': 'üáØüáµ',
    'india': 'üáÆüá≥',
    'south korea': 'üá∞üá∑',
    'indonesia': 'üáÆüá©',
    'thailand': 'üáπüá≠',
    'vietnam': 'üáªüá≥',
    'philippines': 'üáµüá≠',
    'malaysia': 'üá≤üáæ',
    'singapore': 'üá∏üá¨',
    'taiwan': 'üáπüáº',
    'hong kong': 'üá≠üá∞',
    'pakistan': 'üáµüá∞',
    'bangladesh': 'üáßüá©',
    'sri lanka': 'üá±üá∞',
    'nepal': 'üá≥üáµ',
    'myanmar': 'üá≤üá≤',
    'cambodia': 'üá∞üá≠',
    'laos': 'üá±üá¶',
    'mongolia': 'üá≤üá≥',
    'kazakhstan': 'üá∞üáø',
    'uzbekistan': 'üá∫üáø',
    'kyrgyzstan': 'üá∞üá¨',
    'tajikistan': 'üáπüáØ',
    'turkmenistan': 'üáπüá≤',
    'afghanistan': 'üá¶üá´',
    'iran': 'üáÆüá∑',
    'iraq': 'üáÆüá∂',
    'syria': 'üá∏üáæ',
    'lebanon': 'üá±üáß',
    'jordan': 'üáØüá¥',
    'israel': 'üáÆüá±',
    'palestine': 'üáµüá∏',
    'saudi arabia': 'üá∏üá¶',
    'united arab emirates': 'üá¶üá™',
    'qatar': 'üá∂üá¶',
    'kuwait': 'üá∞üáº',
    'bahrain': 'üáßüá≠',
    'oman': 'üá¥üá≤',
    'yemen': 'üáæüá™',
    'georgia': 'üá¨üá™',
    'armenia': 'üá¶üá≤',
    'azerbaijan': 'üá¶üáø',
    
    // Oceania
    'australia': 'üá¶üá∫',
    'new zealand': 'üá≥üáø',
    'fiji': 'üá´üáØ',
    'papua new guinea': 'üáµüá¨',
    'samoa': 'üáºüá∏',
    'tonga': 'üáπüá¥',
    'vanuatu': 'üáªüá∫',
    'solomon islands': 'üá∏üáß'
  };
  
  return countryFlags[country.toLowerCase()] || 'üåç';
}

export function MonthlyStatsBox({ data, profile, country }: MonthlyStatsBoxProps) {
  if (!data || data.length === 0) return null;

  const timeClasses = Array.from(new Set(data.map((d) => d.time_class)));
  const [selectedClass, setSelectedClass] = useState<string>(timeClasses[0]);
  
  const gamesByTimeClass = convertToGameData(data);
  const selectedGames = gamesByTimeClass[selectedClass] || [];

  return (
    <div style={{
      width: '100rem',
      maxWidth: '100rem',
      height: 500,
      backgroundColor: '#18191b',
      color: '#fff',
      borderRadius: '0.75rem',
      boxShadow: '0 10px 15px -3px rgba(0,0,0,0.1), 0 4px 6px -4px rgba(0,0,0,0.1)',
      padding: '1.5rem',
      display: 'flex',
      flexDirection: 'column',
      border: '1px solid #374151',
      marginLeft: 0,
      marginRight: 'auto',
      alignSelf: 'flex-start',
      position: 'relative'
    }}>
      {profile && (
        <div style={{
          position: 'absolute',
          top: '1rem',
          left: '1.5rem',
          display: 'flex',
          alignItems: 'center',
          gap: '0.75rem',
          zIndex: 10
        }}>
          <img
            src={profile.avatar && profile.avatar.trim() !== "" ? profile.avatar : "/public/default-avatar.png"}
            alt={profile.name}
            style={{
              width: '3rem',
              height: '3rem',
              borderRadius: '50%',
              objectFit: 'cover',
              border: '2px solid #374151'
            }}
          />
          <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start' }}>
            <div style={{ fontSize: '1rem', fontWeight: '500' }}>{profile.username}</div>
            <div style={{ fontSize: '1.25rem' }}>{getCountryFlag(country)}</div>
          </div>
        </div>
      )}
      <div style={{ marginBottom: '1rem', display: 'flex', gap: '1rem', justifyContent: 'center' }}>
        {timeClasses.map((tc) => (
          <button
            key={tc}
            onClick={() => setSelectedClass(tc)}
            style={{
              padding: '0.5rem 1rem',
              borderRadius: '0.5rem',
              border: selectedClass === tc ? `2px solid ${COLORS[tc] || '#fff'}` : '2px solid transparent',
              backgroundColor: selectedClass === tc ? `${COLORS[tc] || '#fff'}20` : 'transparent',
              color: COLORS[tc] || '#fff',
              cursor: 'pointer',
              fontSize: '0.9rem',
              fontWeight: selectedClass === tc ? 'bold' : 'normal',
              transition: 'all 0.2s ease'
            }}
          >
            {tc.charAt(0).toUpperCase() + tc.slice(1)}
          </button>
        ))}
      </div>
      
      <div style={{ flex: 1, padding: '1rem' }}>
        <RatingProgressionChart
          games={selectedGames}
          title={`${selectedClass.charAt(0).toUpperCase() + selectedClass.slice(1)} Rating Progression`}
          height={380}
          lineColor={COLORS[selectedClass]}
        />
      </div>
    </div>
  );
}